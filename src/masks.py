def get_mask_card_number(card_number: str) -> str:
    """
    Функция принимает на вход номер карты и возвращает его маску.
    Номер карты замаскирован и отображается в формате XXXX XX** **** XXXX,
    где X — это цифра номера. Видимы первые 6 цифр и последние 4 цифры, остальные символы отображаются звездочками.
    Номер разбит по блокам
    по 4 цифры, разделённым пробелами.

    Args:
        card_number (str): Строка, содержащая номер банковской карты.
        Допускается присутствие разделительных знаков (пробелы, дефисы, подчёркивания).

    Returns:
        str: Строка с замаскированным номером карты в формате XXXX XX** **** XXXX.

    """

    # Удаляем все нецифровые символы
    clean_digits = "".join(char for char in card_number if char.isdigit())

    # Проверяем длину очищенного номера карты
    if len(clean_digits) != 16:
        return "Ошибка: неверная длина номера карты. Должно быть ровно 16 цифр."

    # Создаем маску номера карты
    masked_card_number = f"{clean_digits[:4]} {clean_digits[4:6]}** **** {clean_digits[-4:]}"

    # Возвращаем замаскированную версию номера карты (видимы первые 6 и последние 4 цифры)
    return masked_card_number


def get_mask_account(account_number: str) -> str:
    """
    Функция принимает на вход номер счёта и возвращает его маску.
    Номер счёта замаскирован и отображается в формате **XXXX, где X — это цифра номера.
    Видимы только последние 4 цифры номера, а перед ними — две звездочки.

    Args:
        account_number (str): Строка, содержащая номер счёта. Может включать
                            разделители (пробелы, дефисы, подчёркивания и т.п.).

    Returns:
        str: Строка с замаскированным номером счёта в формате **XXXX.

    """
    # Удаляем все нецифровые символы
    clean_digits = "".join(char for char in account_number if char.isdigit())

    # Проверяем длину очищенного номера счета
    if len(clean_digits) < 4:
        return "Ошибка: неверная длина номера счета. Должно быть не менее 4 цифр"

    # Создаем маску номера счёта
    masked_account_number = f"**{clean_digits[-4:]}"

    # Возвращаем замаскированную версию номера счёта (видимы только последние 4 цифры)
    return masked_account_number
