def filter_by_state(transactions: list[dict[str, str | int]], state: str = "EXECUTED") -> list[dict[str, str | int]]:
    """
    Данная функция получает список транзакций и возвращает новый список,
    включающий только те транзакции, у которых значение ключа 'state'
    совпадает с переданным параметром state. По умолчанию фильтр ищет
    транзакции с состоянием 'EXECUTED'

    Args:
        transactions (list): Список транзакций, представляющих собой словари.
                             Каждая транзакция, должна иметь ключ 'state'.
                             Определяющий её текущее состояние.
        state (str): Строка, определяющая интересующее состояние транзакции.
                     Значением по умолчанию является 'EXECUTED', означающее
                     выполненную транзакцию.

    Returns:
        list: Отфильтрованный список транзакций, удовлетворяющий условиям
              выбора по переданному состоянию.
    """

    # Создаем пустой список для хранения отобранных транзакций
    filtered_transactions = []

    # Проходим циклом по каждой транзакции в переданном списке
    for transaction in transactions:
        # Проверяем, соответствует ли состояние текущей транзакции запрашиваемое
        if transaction.get("state") == state:
            # Добавляем подходящую транзакцию в результирующий список
            filtered_transactions.append(transaction)

    # Добавляем итоговый список отфильтрованных транзакций
    return filtered_transactions


def sort_by_date(operations: list[dict[str, str | int]], descending: bool = True) -> list[dict[str, str | int]]:
    """
    Функция принимает список операций и необязательный параметр descending, определяющий порядок сортировки.

    Args:
        operations (list): Список операций, каждая операция представлена в виде словаря, содержащего среди прочих полей
                           обязательный ключ 'date'.

        descending (bool, optional): Параметр, определяющий порядок сортировки.
                                         - Если установлен в 'True' (используется по умолчанию)
                                           события сортируются по убыванию дат,
                                           то есть самыми первыми окажутся наиболее поздние (новейшие) события.
                                         -Если установлен в 'False', события сортируются по возрастанию дат,
                                          то есть первыми будут отображаться самые ранние события.

            Примеры:
                - `descending=True`: `[{"date": "2023-12-31"}, {"date": "2022-01-01"}] → ["2023-12-31", "2022-01-01"]`
                - `descending=False`: `[{"date": "2023-12-31"}, {"date": "2022-01-01"}] → ["2022-01-01", "2023-12-31"]`

    Returns:
        list: Новый отсортированный список операций.
    """

    # Производим сортировку операций по дате с указанием направления (по убыванию или возрастанию)
    sorted_operations = sorted(operations, key=lambda x: x["date"], reverse=descending)

    return sorted_operations
